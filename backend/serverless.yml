service:
  name: MySportTeam

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-plugin-canary-deployments
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-s3-local
  - serverless-offline
  

custom:
  topicName: imagesTopic-${self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v0.1.0
        title: MySportTeam API
        description: MySportTeam Serverless application
  serverless-iam-roles-per-function:
    defaultInherit: true
  serverless-offline:
    port: 3003
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: false
  s3:
    port: 8001
    directory: /tmp  # this directory must be already created.
    sns-endpoint: http://127.0.0.1:4002 # Optional. Only if you want to use a custom endpoint

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TEAMS_TABLE: Team-${self:provider.stage}
    CONNECTIONS_TABLE: connections-${self:provider.stage}
    CREATED_AT_INDEX: CreatedAtIndex
    IMAGES_S3_BUCKET: seb6-mysportteam-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    # DOMAIN: dev-bquc1kgl.auth0.com
  tracing: true # enable tracing
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

functions:
  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler

  GetTeams:
    handler: src/lambda/http/team/getTeams.handler
    events:
      - http:
          method: get
          path: teams
          cors: true
          # authorizer: Auth
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEAMS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEAMS_TABLE}/index/${self:provider.environment.CREATED_AT_INDEX}

  GetTeam:
    handler: src/lambda/http/team/getTeam.handler
    events:
      - http:
          method: get
          path: teams/{teamId}
          cors: true
          # authorizer: Auth
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEAMS_TABLE}
      
  CreateTodo:
    handler: src/lambda/http/team/createTeam.handler
    events:
      - http:
          method: post
          path: teams
          # authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(models/create-team-request.json)}
          documentation:
            summary: Create a new team item
            description: Create a new team, with a sport, ans season
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEAMS_TABLE}

  UpdateTodo:
    handler: src/lambda/http/team/updateTeam.handler
    events:
      - http:
          method: patch
          path: teams/{teamId}
          # authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(models/update-team-request.json)}
          documentation:
            summary: Update a team item
            description: Update a team item name, season, sport or retired status
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEAMS_TABLE}
        
  DeleteTodo:
    handler: src/lambda/http/team/deleteTeam.handler
    events:
      - http:
          method: delete
          path: teams/{teamId}
          # authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEAMS_TABLE}
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live

  GenerateUploadUrl:
    handler: src/lambda/http/team/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: teams/{teamId}/attachment
          cors: true
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEAMS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/* 
  
  # SyncWithElasticsearch:
  #   environment:
  #     ES_ENDPOINT: !GetAtt TodosSearch.DomainEndpoint
  #   handler: src/lambda/dynamodb/elasticsearchSync.handler
  #   events:
  #     - stream:
  #         type: dynamodb
  #         arn: !GetAtt TodosDynamoDBTable.StreamArn
  
  SendUploadNotif: # reduce lambda function name to satisfy IAM role name 64 character limitation
    environment:
      STAGE: ${self:provider.stage}
      REGION: ${self:provider.region}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live

resources:
  Resources:
    MyTeamDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: PK
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        # StreamSpecification:
        #   StreamViewType: NEW_IMAGE
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: ${self:provider.environment.TEAMS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref TeamTopic
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # TodosSearch:
    #   Type: AWS::Elasticsearch::Domain
    #   Properties:
    #     ElasticsearchVersion: '7.4'
    #     DomainName: todos-search-${self:provider.stage}
    #     ElasticsearchClusterConfig:
    #       DedicatedMasterEnabled: false
    #       InstanceCount: '1'
    #       ZoneAwarenessEnabled: false
    #       InstanceType: t2.small.elasticsearch
    #     EBSOptions:
    #       EBSEnabled: true
    #       Iops: 0
    #       VolumeSize: 10
    #       VolumeType: 'gp2'

    #     AccessPolicies:
    #       Version: '2012-10-17'
    #       Statement:
    #         -
    #           Effect: Allow
    #           Principal:
    #             AWS: '*'
    #           Action: 'es:*'
    #           Resource: '*'

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref TeamTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref TeamTopic

    TeamTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Team bucket topic
        TopicName: ${self:custom.topicName}